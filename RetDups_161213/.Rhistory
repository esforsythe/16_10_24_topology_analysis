#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = "Many_sisters"}
###What is sister to the C.grand - C. rubella clade?
#CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
#CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
#CrubCgra_sis_count<-length(CrubCgra_sisters)
#if(CrubCgra_sis_count==1)
#{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
#plot.phylo(root_tree, show.node.label=TRUE)
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, final_topology_loose, BS_score
#, Athal_sis_paste, CrubCgra_sis_paste
))
}
trees<-read.tree("topten")
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/RetDups_161213")
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
lapply(out_trees, PlotTreesFunc)
PlotTreesFunc<-function(tree){
plot.phylo(root_tree, cex=0.7)
nodelabels(root_tree$node.label, cex=0.7)
}
lapply(out_trees, PlotTreesFunc)
PlotTreesFunc<-function(tree){
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
}
lapply(out_trees, PlotTreesFunc)
PlotTreesFunc<-function(tree){
plot.phylo(tree, cex=0.7)
nodelabels(tree$edge, cex=0.7)
}
lapply(out_trees, PlotTreesFunc)
PlotTreesFunc<-function(tree){
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
}
PlotTreesFunc<-function(tree){
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
}
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
root_tree<-midpoint(tree)
Split_trees<-function(tree){
#root by arbitrary branch just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
#midpoint root the tree
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
lapply(out_trees, PlotTreesFunc)
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
root_tree<-midpoint(tree)
root_tree<-compute.brlen(root_tree, 100)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
sliced_trees[1]
first_subtree<-sliced_trees[1]
plot(first_subtree)
class(first_subtree)
first_subtree<-write.tree(sliced_trees[1])
class(first_subtree)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
class(first_subtree)
first_subtree$tip.label
tips4root<-first_subtree$tip.label
tree<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
tree<-root(tree, tips4root, edgelabel=TRUE)
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
###Fuction for splitting trees into sub trees
Split_trees<-function(tree){
#root by arbitrary branch just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
#midpoint root the tree
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
root_tree2<-root(tree, tips4root, edgelabel=TRUE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
root_tree2<-root(tree, tips4root, edgelabel=TRUE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
plot(root_tree2)
root_tree2
plot(root_tree2)
root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=FALSE)
plot(root_tree2)
root_tree2
subtrees
?subtrees
getMRCA(tree, tips4root)
MRCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree, MRCA4root, edgelabel=TRUE, resolve.root=FALSE)
?root.phylo
read.tree
?read.tree
root_tree2<-root(tree, node=MRCA4root, edgelabel=TRUE, resolve.root=FALSE)
plot(root_tree2)
plot(root_tree2)
root_tree2<-root(tree, node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
plot(root_tree2)
root
root()
root_tree2<-root(tree, tips4root, node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
plot(root_tree2)
plot(root_tree2)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
?treeSlice
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=FALSE, prompt=FALSE)
RCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=FALSE, prompt=FALSE)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
MRCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
root_tree2<-compute.brlen(root_tree2, 100)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
write.tree(sliced_trees2, append=TRUE)
Split_trees<-function(tree){
#root by arbitrary branch just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
#midpoint root the tree
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
MRCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
root_tree2<-compute.brlen(root_tree2, 100)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
lapply(out_trees, PlotTreesFunc)
Split_trees<-function(tree){
#root by arbitrary branch just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
#midpoint root the tree
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
MRCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
root_tree2<-compute.brlen(root_tree2, 100)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
}
Split_trees<-function(tree){
#root by arbitrary branch just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#tree<-root(tree, tree$tip.label[1], edgelabel=TRUE)
#midpoint root the tree
root_tree<-midpoint(tree)
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
MRCA4root<-getMRCA(tree, tips4root)
root_tree2<-root(tree,node=MRCA4root, edgelabel=TRUE, resolve.root=TRUE)
root_tree2<-compute.brlen(root_tree2, 100)
sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
lapply(out_trees, PlotTreesFunc)
#BS debug tree
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
tips4root
#BS debug tree
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
root_tree<-midpoint(tree)
root_tree<-compute.brlen(root_tree, 100)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
tips4root<-first_subtree$tip.label
root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
extract.clade(root_tree2, tips4root)
MRCA4root<-getMRCA(tree, tips4root)
extract.clade(root_tree2, MRCA4root)
subtree1<-extract.clade(root_tree2, MRCA4root)
plot.phylo(subtree1, cex=0.7)
nodelabels(subtree1$node.label, cex=0.7)
subtree1<-drop.tip(root_tree1, MRCA4root)
subtree1<-drop.tip(root_tree2, MRCA4root)
subtree1<-extract.clade(root_tree2, MRCA4root)
subtree2<-drop.tip(root_tree2, MRCA4root)
plot.phylo(subtree2, cex=0.7)
nodelabels(subtree2$node.label, cex=0.7)
plot(subtree2)
install.packages("phangorn")
install.packages("phangorn")
library(phangorn)
tree
plot(tree)
midpoint(tree, node.labels="support")
rooooooot<-midpoint(tree, node.labels="support")
plot(rooooooot)
nodelabels(rooooooot$node.label)
Split_trees<-function(tree){
#midpoint root the tree
root_tree<-midpoint(tree, node.labels="support")
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
#first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
#tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#MRCA4root<-getMRCA(tree, tips4root)
#root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
#subtree1<-extract.clade(root_tree2, MRCA4root)
#subtree2<-drop.tip(root_tree2, MRCA4root)
#root_tree2<-compute.brlen(root_tree2, 100)
#sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
install.packages("ape")
library(ape)
install.packages("phytools")
install.packages("ape")
out_trees_string<-sapply(trees, Split_trees)
install.packages("ape")
library(ape)
install.packages("phytools")
library(phytools)
library(geiger)
install.packages("phangorn")
library(phangorn)
install.packages("phangorn")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
lapply(out_trees, PlotTreesFunc)
PlotTreesFunc<-function(tree){
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
}
lapply(out_trees, PlotTreesFunc)
#BS debug tree
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
root_tree<-midpoint(tree, node.labels="support")
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
#first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
#tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#MRCA4root<-getMRCA(tree, tips4root)
#root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
#subtree1<-extract.clade(root_tree2, MRCA4root)
#subtree2<-drop.tip(root_tree2, MRCA4root)
#root_tree2<-compute.brlen(root_tree2, 100)
#sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees2, append=TRUE)
Split_trees<-function(tree){
#midpoint root the tree
root_tree<-midpoint(tree, node.labels="support")
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
#first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
#tips4root<-first_subtree$tip.label
#root by one of the subtrees just so that I can use the edgelabel=TRUE argument with ape root.
#This may be a solution to all my BS score woes!
#MRCA4root<-getMRCA(tree, tips4root)
#root_tree2<-root(tree, tips4root, edgelabel=TRUE, resolve.root=TRUE)
#subtree1<-extract.clade(root_tree2, MRCA4root)
#subtree2<-drop.tip(root_tree2, MRCA4root)
#root_tree2<-compute.brlen(root_tree2, 100)
#sliced_trees2<-treeSlice(root_tree2, 0.01, trivial=TRUE, prompt=FALSE)
#print trees
write.tree(sliced_trees, append=TRUE)
}
trees<-read.tree("topten")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
lapply(out_trees, PlotTreesFunc)
#BS debug tree
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
tree<-read.tree(
text="(Al16046805:0.02151999879561814627,((Es10007402:0.05149637094984380048,(Es10028585:0.01854350125185300416,((AtAT4G02290:0.02652812623090433641,Al16047732:0.01452782676346934913)92:0.00497778618478454411,((((Cs010456052:0.00064572451763527294,Cs010456051:0.00000195809054684368)100:0.00527513805751742698,(Cs010422611:0.00000195809054684368,Cs010422612:0.00000195809054684368)100:0.00387544078492336758)100:0.01510840443387256697,(Cr10000741:0.00533068260121769347,Cg0753s0009:0.00384008143586313721)100:0.02484910618776361990)100:0.02079819868951569492,Bs16335s0022:0.01571388746784372140)99:0.01101894025011419809)100:0.03511076597586191422)100:0.17064354211939899986)99:0.02832484043025221276,(Bs4824s0048:0.01920704727219900779,(Cs010481246:0.03228961428521013449,(Cr10011914:0.00271303524365368873,Cg0566s0020:0.00131461156353825559)100:0.02494710055904493518)85:0.00460279412807546029)95:0.00862302908823404414)99:0.01201443765595408379,AtAT1G02800:0.01770422986556156181);
")
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.7)
plot.phylo(tree, cex=0.7)
nodelabels(tree$node.label, cex=0.5)
root_tree<-midpoint(tree, node.labels="support")
plot.phylo(root_tree, cex=0.7)
nodelabels(root_tree$node.label, cex=0.5)
two_trees<-treeSlice(root_tree, 0.01, prompt=FALSE)
plot(two_trees[1])
ls
clear
write_tree(two_trees, append=TRUE)
write.tree(two_trees, append=TRUE)
first_subtree<-read.tree(text=write.tree(two_trees[1]))
plot(first_subtree)
nodelabels(first_subtree$node.label)
root_tree<-midpoint(tree, node.labels="support")
root_tree<-compute.brlen(root_tree, 100)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
second_subtree<-read.tree(text=write.tree(sliced_trees[2]))
tips4root1<-first_subtree$tip.label
tips4root2<-second_subtree$tip.tabel
MRCA4root1<-getMRCA(root_tree, tips4root1)
MRCA4root2<-getMRCA(root_tree, tips4root2)
subtree1<-extract.clade(root_tree, MRCA4root1)
subtree2<-extract.clade(root_tree, MRCA4root2)
MRCA4root2<-getMRCA(root_tree, tips4root2)
MRCA4root2
second_subtree<-read.tree(text=write.tree(sliced_trees[2]))
plot(second_subtree)
plot(first_subtree)
tips4root1<-first_subtree$tip.label
tips4root1
tips4root2
tips4root2<-second_subtree$tip.tabel
tips4root2
second_subtree$tip.label
tips4root2<-second_subtree$tip.label
tips4root2
MRCA4root1<-getMRCA(root_tree, tips4root1)
MRCA4root2<-getMRCA(root_tree, tips4root2)
subtree1<-extract.clade(root_tree, MRCA4root1)
subtree2<-extract.clade(root_tree, MRCA4root2)
plot(subtree1)
nodelabels(subtree1$node.label)
plot(root_tree)
nodelabels(root_tree$node.label)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=TRUE, prompt=FALSE)
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
first_subtree<-read.tree(text=write.tree(sliced_trees[1]))
plot(first_subtree)
nodelabels(first_subtree$node.label)
sliced_trees
first_subtree<-read.tree(sliced_trees[1])
first_subtree<-read.tree("sliced_trees[1]")
sliced_trees
sliced_trees[1]
one<-sliced_trees[1]
plot(one)
class(sliced_trees)
as.phylo(sliced_trees[1])
plot(one)
plot(sliced_trees[1])
plot(sliced_trees[2])
plot(sliced_trees)
nodelabels(sliced_trees)
plot(sliced_trees)
lapply(sliced_trees, PlotTreesFunc)
plot(root_tree)
nodelabels(root_tree$node.label)
?extract.clade
tips4root1<-first_subtree$tip.label
tips4root1
MRCA4root1<-getMRCA(root_tree, tips4root1)
subtree1<-extract.clade(root_tree, MRCA4root1)
plot(subtree1)
nodelabels(subtree1$node.label)
subtree1
root_tree
rm()
write.tree(subtree1)
class(tips4root1)
class(MRCA4root1)
root_tree
plot(root_tree)
