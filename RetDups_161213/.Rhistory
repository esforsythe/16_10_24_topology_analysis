library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("phangorn", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?F18
??F18
?dist.dna
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("phangorn")
library("phangorn", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
help parsimony
-help parsimony
library parsimony
? parsimony
? morphological
??morphological
??binary
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("phangorn", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
? morphological
??morphological
?parsimony
??binary
??phangorn-packa
?phangorn
library(help=phangorn)
library(help = phangorn)
library(help=phyDat)
?phyDat''
? phyDat
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("geiger", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("TreeSim", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?sim.bd.taxa.age
t1obj=sim.bd.taxa.age(100,1,spec_rate=1,0,1,1,mrca=TRUE)
t1obj=sim.bd.taxa.age(100,1,1,0,1,1,mrca=TRUE)
t1 = t1obj[1]
plot.phylo (t1)
plit t1
plot t1
plot (t1)
plot t1obj
rm t1
clear t1
t1 = t1obj[[1]]
plot.phylo (t1)
x <- sim.char(t1, matrix(10) )
y <- sim.char(t1, matrix(10) )
plot (x,y)
fit1 = lm(y~x)
summary(fit1)
lines(x,fit1$coefficients[1] + x*fit1$coefficients[2])
x_ic <- pic(x, t1)
y_ic <- pic(y, t1)
plot (x_ic,y_ic)
fit1_1 = lm(y_ic-x_ic)
fit1_1 = 1m(y_ic-x_ic)
fit11 = lm(y_ic~x_ic)
summary(fit1)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
fitpic = lm(y_ic ~ x_ic -1)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
summary fitpic
summary (fitpic)
t2obj=sim.bd.taxa.age(100,1,50,0,1,1,mrca=TRUE)
t2 = t2obj[[1]]
x2 <- sim.char(t1, matrix(10) )
x2 <- sim.char(t2, matrix(10) )
y2 <- sim.char(t2, matrix(10) )
plot (x1,y1)
plot (x2,y2)
fit2 = lm(y2~x2)
summary(fit2)
lines(x2,fit2$coefficients[1] + x2*fit1$coefficients[2])
x_ic2 <- pic(x2, t2)
y_ic2 <- pic(y2, t2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
summary (fitpic2)
plot (x_ic2,y_ic2)
lines(x_ic,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
plot (x_ic2,y_ic2)
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
plot (x_ic2,y_ic2)
lines(x_ic2,fit2$coefficients[1] + x_ic2*fitpic2$coefficients[2])
plot(fitpic)
plot(fitpic2)
summary (fitpic2)
plot(x_ic2,y_ic2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
lines(x_ic2,fit11$coefficients[1] + x_ic2*fitpic2$coefficients[2])
lines(x_ic2,fit1$coefficients[1] + x_ic2*fitpic2$coefficients[2])
plot(x_ic2,y_ic2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
lines(x_ic2,fitpic2$coefficients[1] + x_ic2*fitpic2$coefficients[2])
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
plot (x_ic2,y_IC2)
plot (x_ic2,y_ic2)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
plot.phylo (t2)
t1obj=sim.bd.taxa.age(100,1,100,0,1,1,mrca=TRUE)
t1obj=sim.bd.taxa.age(100,1,1,0,1,1,mrca=TRUE)
t3obj=sim.bd.taxa.age(100,1,100,0,1,1,mrca=TRUE)
t3 = t3obj[[1]]
x3 <- sim.char(t3, matrix(10) )
y3 <- sim.char(t3, matrix(10) )
plot(x3,y3)
fit3 = lm(y3~x3)
summary(fit3)
lines(x3,fit3$coefficients[1] + x3*fit3$coefficients[2])
x_ic3 <- pic(x3, t3)
y_ic3 <- pic(y3, t3)
plot(x_ic3,y_ic3)
fitpic3 = lm(y_ic3 ~ x_ic3 -1)
summary (fitpic3)
plot.phylo (t3)
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?ace
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/concat_align.fa")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/concat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/cat_alignment.fa", sig.test = "J", block.size = 10000, replicate = 100)
> install.packages("evobiR")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/chlorotop_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Boecheradopsis_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/nuclear_topolgy_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff1_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff2_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff3_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff4_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff5_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff6_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff7_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff8_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 100000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 100000, replicate = 500)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 50000, replicate = 500)
> install.packages("evobiR")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/catfile160414")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/practice_1.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/practice_2.fasta")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_cat_align.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_cat_align.fasta")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_concat_notfull.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_concat_notfull_rearrange.fasta")
install.packages("evobiR")
library("evobiR")
CalcPopD
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta", sig.test = "B", replicate = 100)
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta", sig.test = "B", replicate = 100)
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
packages(evobiR)
package(evobiR)
citation(evobiR)
install.packages("evobiR", repos='http://cran.itam.mx/')
install.packages("evobiR")
library("evobiR")
citation(evobiR)
citation("evobiR")
citation
citation(package = "base", lib.loc = NULL, auto = NULL)
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/CP_analysis_161201")
install.packages("ape")
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
trees<-read.tree("CPcatfile161208")
Ntrees<-length(trees)
TopAnalFunc<-function(tree){
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE)
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
root_tree$node.label=tree$node.label
#root_tree$node.label
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Csat", tips2)
Crub_tip<-grep("Crub", tips2)
Cgrand_tip<-grep("Cgra", tips2)
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology (STRICT: requires that A, B, and/or C clade are perfectly monogomous)
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the correct topology (LOOSE: Topology analysis with less-strict monophyly requirements)
if(BC_clade) {final_topology_loose = "BC_topology"} else if(AC_clade) {final_topology_loose = "AC_topology"} else if (AB_clade) {final_topology_loose = "AB_topology"} else {final_topology_loose = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology_loose == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Investigating the non-monophyletic topologies
Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
Athal_sis_count<-length(Athal_sisters)
if(Athal_sis_count==1)
{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = Many_sisters}
#What is sister to the C.grand - C. rubella clade?
CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
CrubCgra_sis_count<-length(CrubCgra_sisters)
if(CrubCgra_sis_count==1)
{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
return(c(Agroup_mono, CrubCgrand_mono, Cgroup_mono, final_topology, final_topology_loose, BS_score, Athal_sis_paste, CrubCgra_sis_paste))
}
Ntrees<-length(trees)
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support", "Athal_sister", "CrubCgra_sister")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels, main="Nuclear Topologies (strict)")
#make a pie chart of topologies (LOOSE)
labels_loose<-names(summary(output_df$Topology_loose))
labels_loose<-paste(labels_loose, summary(output_df$Topology_loose))
pie(summary(output_df$Topology_loose), labels=labels_loose, main="Nuclear Topologies (loose)")
write.csv(output_df, file = "CP_topAnal161215.csv")
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
#plot  the histogram
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,5))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100), ylim=c(0,5))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100), ylim=c(0,5))
output
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
#plot  the histogram
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology_loose == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology_loose == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology_loose == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,5))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100), ylim=c(0,5))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100), ylim=c(0,5))
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,7))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100), ylim=c(0,7))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100), ylim=c(0,7))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,8))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,10))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,12))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,15))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,20))
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100), ylim=c(0,20))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,20))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100), ylim=c(0,20))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100), ylim=c(0,20))
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/RetDups_161213")
install.packages("ape")
library(ape)
library(phytools)
library(geiger)
install.packages("ape")
library(ape)
library(phytools)
library(geiger)
