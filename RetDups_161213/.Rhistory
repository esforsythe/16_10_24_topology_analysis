#print trees
write.tree(c(subtree1, subtree2), append=TRUE)}
}
#if it didn't yeild two subtrees, that means that one of the accessions came out sister to all others.  These trees should be discarded.
if (sliced_trees == "2 phylogenetic trees"){
alltips<-root_tree$tip.label
tips1<-sliced_trees[[1]]$tip.label
tips2<-sliced_trees[[2]]$tip.label
subtree1<-drop.tip(root_tree, setdiff(alltips, tips2))
subtree2<-drop.tip(root_tree, setdiff(alltips, tips1))
#print trees
write.tree(c(subtree1, subtree2), append=TRUE)}
tree<-read.tree(
text="(AtAT1G03440:0.04187114736661239067,((((Cs010482019:0.00892043219658301273,Cs010457352:0.01435909806981883544)100:0.03064189833869035429,(Cg0897s0036:0.00948660195299155795,Cr10009374:0.00843410616892512066)100:0.04479526052592704144)100:0.01799473060997335352,Bs26675s0409:0.02800045298680505640)95:0.01359664144612090717,(Es10007833:0.05296089315262035579,(Es10028712:0.07209245987680516776,((Al16052825:0.02856084135001413227,AtAT4G03010:0.03853733051962800887)98:0.01418603820720442006,(Bs2983s0141:0.02700137720334141317,(Cs010430633:0.04686687234906011801,(Cg2552s0026:0.00960537314393852641,Cr10003741:0.00260572075228526117)100:0.03463138745472209984)89:0.01408569171677174700)65:0.00736980102632710677)99:0.04028433347754449556)100:0.14153114841339650698)77:0.01424026568817608751)95:0.01769571435218073030,Al16055687:0.02174917917597851691);
")
root_tree<-midpoint(tree, node.labels="support")
root_tree<-compute.brlen(root_tree, 100)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=FALSE, prompt=FALSE)
if (sliced_trees == "2 phylogenetic trees"){
alltips<-root_tree$tip.label
tips1<-sliced_trees[[1]]$tip.label
tips2<-sliced_trees[[2]]$tip.label
subtree1<-drop.tip(root_tree, setdiff(alltips, tips2))
subtree2<-drop.tip(root_tree, setdiff(alltips, tips1))
#print trees
write.tree(c(subtree1, subtree2), append=TRUE)
}
#^^^ end of if loop ^^^
length(sliced_trees)
if (length(sliced_trees) == 2){
alltips<-root_tree$tip.label
tips1<-sliced_trees[[1]]$tip.label
tips2<-sliced_trees[[2]]$tip.label
subtree1<-drop.tip(root_tree, setdiff(alltips, tips2))
subtree2<-drop.tip(root_tree, setdiff(alltips, tips1))
#print trees
write.tree(c(subtree1, subtree2), append=TRUE)
}
#^^^ end of if loop ^^^
trees<-read.tree("catfile_allretdups")
Split_trees<-function(tree){
#midpoint root the tree
root_tree<-midpoint(tree, node.labels="support")
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=FALSE, prompt=FALSE)
#This if/else loop is to verify that the split worked and yeilded two sub trees
#if it didn't yeild two subtrees, that means that one of the accessions came out sister to all others.  These trees should be discarded.
if (length(sliced_trees) == 2){
alltips<-root_tree$tip.label
tips1<-sliced_trees[[1]]$tip.label
tips2<-sliced_trees[[2]]$tip.label
subtree1<-drop.tip(root_tree, setdiff(alltips, tips2))
subtree2<-drop.tip(root_tree, setdiff(alltips, tips1))
#print trees
write.tree(c(subtree1, subtree2), append=TRUE)
}
#^^^ end of if loop ^^^
#vvv end of split function vvv
}
out_trees_string<-sapply(trees, Split_trees)
out_trees
trees<-read.tree("catfile_allretdups")
trees
out_trees_string<-sapply(trees, Split_trees)
out_trees
out_trees_string
trees<-read.tree("top91")
out_trees_string<-sapply(trees, Split_trees)
out_trees_string
trees<-read.tree("catfile_allretdups")
out_trees_string<-sapply(trees, Split_trees)
write(out_trees_string, outfile161230)
write(out_trees_string, file="outfile161230")
write.table(out_trees_string, file="outfile161230")
class(out_trees_string)
g?rep
?grep
grep(NULL, out_trees_string)
grep("NULL", out_trees_string)
out_trees<-read.tree(text=c(out_trees_string))
class(out_trees_string)
class(out_trees_string[1])
class(out_trees_string[[1]])
class(out_trees_string[[91]])
?subset
bad_split<-grep("NULL", out_trees_string)
subset(out_trees_string, drop=[[bad_split]])
subset(out_trees_string, drop=[bad_split])
subset(out_trees_string, drop=bad_split)
subset(out_trees_string, subset(drop=bad_split))
subset(out_trees_string, subset=drop=bad_split)
subset(out_trees_string, subset=bad_split)
filter(out_trees_string)
bad_split
trees<-read.tree("catfile_retdups161230")
out_trees_string<-sapply(trees, Split_trees)
bad_split<-grep("NULL", out_trees_string)
bad_split
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
Ntrees
output<-lapply(out_trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support")
#, "Athal_sister", "CrubCgra_sister")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels, main="Nuclear Topologies (strict)")
labels_loose<-names(summary(output_df$Topology_loose))
labels_loose<-paste(labels_loose, summary(output_df$Topology_loose))
pie(summary(output_df$Topology_loose), labels=labels_loose, main="Nuclear Topologies (loose)")
#export a CSV file
write.csv(output_df, file = "Retdup161230.csv")
Ntrees<-length(out_trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support")
#, "Athal_sister", "CrubCgra_sister")
tree<-read.tree(
text="(Es519:0.00000123294317084536,((((Bs490:0.02783465390911892337,(((Cs1228:0.00000123294317084536,Cs1227:0.00000123294317084536)100:0.02057628522316251943,Cs1224:0.01330509762615113799)100:0.01301606356384141759,(Cg506:0.00305881723370676241,Cr489:0.00174022991727296075)100:0.02649052339144483681)97:0.00487643472674035693)66:0.00736239175258780656,(At584:0.01431783229187154859,Al502:0.01326828929330620306)100:0.01132639491062012796)95:0.01049204042816733254,((((At586:0.00000123294317084536,At585:0.00000123294317084536)100:0.02295328338961084153,Al501:0.01716735810485423702)100:0.01083672303962998629,(((Cg505:0.00131269792198019557,Cr490:0.00132276359053610550)100:0.02145429051902494194,(Cs1225:0.00000123294317084536,(Cs1229:0.00000123294317084536,Cs1226:0.00000123294317084536)95:0.00000123294317084536)100:0.01909360706433443911)100:0.00928841042651073513,Bs489:0.01307895965517676638)100:0.01425482304497683282)100:0.01313377830485802991,Es522:0.04055939616080898868)100:0.13211867194064186304)100:0.03994598629341783447,Es521:0.00000123294317084536)100:0.00457627915714323239,Es520:0.00000123294317084536);")
root_tree<-midpoint(tree, node.labels="support")
root_tree<-compute.brlen(root_tree, 100)
plot.phylo(root_tree, show.node.label=TRUE)
tree<-read.tree(
text="(Es519:0.00000123294317084536,((((Bs490:0.02783465390911892337,(((Cs1228:0.00000123294317084536,Cs1227:0.00000123294317084536)100:0.02057628522316251943,Cs1224:0.01330509762615113799)100:0.01301606356384141759,(Cg506:0.00305881723370676241,Cr489:0.00174022991727296075)100:0.02649052339144483681)97:0.00487643472674035693)66:0.00736239175258780656,(At584:0.01431783229187154859,Al502:0.01326828929330620306)100:0.01132639491062012796)95:0.01049204042816733254,((((At586:0.00000123294317084536,At585:0.00000123294317084536)100:0.02295328338961084153,Al501:0.01716735810485423702)100:0.01083672303962998629,(((Cg505:0.00131269792198019557,Cr490:0.00132276359053610550)100:0.02145429051902494194,(Cs1225:0.00000123294317084536,(Cs1229:0.00000123294317084536,Cs1226:0.00000123294317084536)95:0.00000123294317084536)100:0.01909360706433443911)100:0.00928841042651073513,Bs489:0.01307895965517676638)100:0.01425482304497683282)100:0.01313377830485802991,Es522:0.04055939616080898868)100:0.13211867194064186304)100:0.03994598629341783447,Es521:0.00000123294317084536)100:0.00457627915714323239,Es520:0.00000123294317084536);
")
root_tree<-midpoint(tree, node.labels="support")
root_tree<-compute.brlen(root_tree, 100)
sliced_trees<-treeSlice(root_tree, 0.01, trivial=FALSE, prompt=FALSE)
plot.phylo(root_tree, show.node.label=TRUE)
tree<-read.tree(
text="(Es519:0.00000123294317084536,((((Bs490:0.02783465390911892337,(((Cs1228:0.00000123294317084536,Cs1227:0.00000123294317084536)100:0.02057628522316251943,Cs1224:0.01330509762615113799)100:0.01301606356384141759,(Cg506:0.00305881723370676241,Cr489:0.00174022991727296075)100:0.02649052339144483681)97:0.00487643472674035693)66:0.00736239175258780656,(At584:0.01431783229187154859,Al502:0.01326828929330620306)100:0.01132639491062012796)95:0.01049204042816733254,((((At586:0.00000123294317084536,At585:0.00000123294317084536)100:0.02295328338961084153,Al501:0.01716735810485423702)100:0.01083672303962998629,(((Cg505:0.00131269792198019557,Cr490:0.00132276359053610550)100:0.02145429051902494194,(Cs1225:0.00000123294317084536,(Cs1229:0.00000123294317084536,Cs1226:0.00000123294317084536)95:0.00000123294317084536)100:0.01909360706433443911)100:0.00928841042651073513,Bs489:0.01307895965517676638)100:0.01425482304497683282)100:0.01313377830485802991,Es522:0.04055939616080898868)100:0.13211867194064186304)100:0.03994598629341783447,Es521:0.00000123294317084536)100:0.00457627915714323239,Es520:0.00000123294317084536);
")
root_tree<-midpoint(tree, node.labels="support")
plot.phylo(root.phylo, show.node.label=TRUE)
tree
tree<-read.tree(
text="(((Cg424:0.00083794383615743448,Cr408:0.00184797329647181643)100:0.02406522073183675267,((Cs1006:0.00000132114869771561,Cs1003:0.00000132114869771561)100:0.01176170245164121636,Cs1004:0.01211493163422812380)99:0.00524486435021751570)87:0.00452230956219556220,((((Es414:0.05275161243444976417,((Bs408:0.01878629976476501109,(Cs1002:0.03666316697503224642,(Cg423:0.00345904104551136371,Cr407:0.00187147136699476312)100:0.02569209198044747344)100:0.01807002220204762324)84:0.00608522077439483788,At461:0.03403276578671626806)99:0.01173501891893004821)100:0.05445483946438144790,(Al420:0.03715381575081574267,Cs1005:0.05158681800660384897)100:0.33558204061195134882)100:0.06755086646527501404,Es413:0.04475580169867881403)96:0.02157639733576732430,(Al419:0.00680102797085907311,(At462:0.00000132114869771561,At463:0.00000132114869771561)100:0.01869691827183433269)100:0.01051170892634918641)60:0.00357239585372689551,Bs407:0.01891340623498140652);")
root_tree<-midpoint(tree, node.labels="support")
root_tree
plot.phylo(root_tree, show.node.label=TRUE)
trees<-read.tree("catfile_retdups161230")
out_trees_string<-sapply(trees, Split_trees)
bad_split
trees<-read.tree("catfile_retdups161230")
out_trees_string<-sapply(trees, Split_trees)
out_trees<-read.tree(text=c(out_trees_string))
Ntrees<-length(out_trees)
output<-lapply(out_trees, TopAnalFunc)
Ntrees<-length(out_trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support")
#, "Athal_sister", "CrubCgra_sister")
write.csv(output_df, file = "Retdup161230.csv")
labels_loose<-names(summary(output_df$Topology_loose))
labels_loose<-paste(labels_loose, summary(output_df$Topology_loose))
pie(summary(output_df$Topology_loose), labels=labels_loose, main="Nuclear Topologies (loose)")
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology_loose == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology_loose == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology_loose == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100))
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
boots_AC<-subset(boots_only, boots_only$Topology_loose == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology_loose == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology_loose == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100))
write.csv(output_df, file = "Retdup161230.csv")
TopAnalFunc<-function(tree){
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
#tips<-tree$tip.label
#Esal_tip<-grep("Es", tips)
#If there is no Esal tip, midpoint root the subtree
#if(Esal_tip == 0) {root_tree<-midpoint(tree)} else {
#root_tree<-root(tree, Esal_tip, resolve.root=TRUE)}
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
#root_tree$node.label=tree$node.label
#root_tree$node.label
root_tree<-tree
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Cs", tips2)
Crub_tip<-grep("Cr", tips2)
Cgrand_tip<-grep("Cg", tips2)
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
#Collapse poorly supported branches
#This is a function that someone wrote.  I found it at:
#http://stackoverflow.com/questions/34403957/how-to-collapse-branches-in-a-phylogenetic-tree-by-the-label-in-their-nodes-or-l
#not working right now
# root_tree<-di2multi4node(root_tree)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
#if(Athal_tip != 0 & Alyr_tip != 0){
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
#if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
#} else {Agroup_mono == "NA"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
#if(Crub_tip != 0 & Cgrand_tip != 0){
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
# if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
#} else {CrubCgrand_mono == "NA"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c(Csat_tip))
if(Csat_mono) {Csatmono= "Csativa_monophyletic"} else {Csatmono= "Csativa_non_monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
#if(Crub_tip != 0 & Cgrand_tip != 0 & Csat_tip != 0){
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
# if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
#} else {Cgroup_mono == "NA"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology (STRICT: requires that A, B, and/or C clade are perfectly monogomous)
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the correct topology (LOOSE: Topology analysis with less-strict monophyly requirements)
if(BC_clade) {final_topology_loose = "BC_topology"} else if(AC_clade) {final_topology_loose = "AC_topology"} else if (AB_clade) {final_topology_loose = "AB_topology"} else {final_topology_loose = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology_loose == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
###Investigating the non-monophyletic topologies
##What is sister to A. thaliana?
#Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
#Athal_sis_count<-length(Athal_sisters)
#if(Athal_sis_count==1)
#{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = "Many_sisters"}
###What is sister to the C.grand - C. rubella clade?
#CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
#CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
#CrubCgra_sis_count<-length(CrubCgra_sisters)
#if(CrubCgra_sis_count==1)
#{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
#.phylo(root_tree, show.node.label=TRUE)
return(c(Athal_tip, Crub_tip, Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, final_topology_loose, BS_score
#, Athal_sis_paste, CrubCgra_sis_paste
))
}
output<-lapply(out_trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_seq", "Crub_seq" "Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support")
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_seq", "Crub_seq", "Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Topology_loose", "Bootstrap_Support")
write.csv(output_df, file = "Retdup161230.csv")
root_tree<-tree
tips2<-root_tree$tip.label
Csat_tip<-grep("Cs", tips2)
Crub_tip<-grep("Cr", tips2)
Cgrand_tip<-grep("Cg", tips2)
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
Athal_tip
Bstri_tip
root_tree$tip.label
tips2
Athal_tip
Athal_tip
print(Athal_tip)
tips(Athal_tip)
tips1
grep(tips1, "Es")
grep("Es", tips1)
sliced_trees[tips1]
CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
library(ape)
library(geiger)
library(phangorn)
tips(Athal_tip)
tips(root_tree, Athal_tip)
return(Athal_tip)
return(tips(Athal_tip))
tips(Athal)
tips(Athal_tip)
tips(root_tree, Athal_tip)
paste(tips(root_tree, Athal_tip))
c(tips(root_tree, Athal_tip))
Athal_tips<-c(tips(root_tree, Athal_tip))
length(Athal_tips)
Athal_tips_count<-length(Athal_tips)
Athal_tips<-c(tips(root_tree, Athal_tip))
Athal_tips
Athal_tips[1]
Athal_tips<-c(tips(root_tree, Athal_tip))
Athal_tips_count<-length(Athal_tips)
if (Athal_tips_count==0)
{Athal_tip_name = "No_Athal_tip"} else if (Athal_tips_count==1)
{Athal_tip_name = Athal_tips} else if (Athal_tips_count==2)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2])} else if (Athal_tips_count==3)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2], Athal_tips[3])}
#find the name of the Crub tip(s)
Crub_tips<-c(tips(root_tree, Crub_tip))
Crub_tips_count<-length(Crub_tips)
if (Crub_tips_count==0)
{Crub_tip_name = "No_Crub_tip"} else if (Crub_tips_count==1)
{Crub_tip_name = Crub_tips} else if (Crub_tips_count==2)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2])} else if (Crub_tips_count==3)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2], Crub_tips[3])}
Athal_tip_name
Crub_tip_name
TopAnalFunc<-function(tree){
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
#tips<-tree$tip.label
#Esal_tip<-grep("Es", tips)
#If there is no Esal tip, midpoint root the subtree
#if(Esal_tip == 0) {root_tree<-midpoint(tree)} else {
#root_tree<-root(tree, Esal_tip, resolve.root=TRUE)}
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
#root_tree$node.label=tree$node.label
#root_tree$node.label
root_tree<-tree
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Cs", tips2)
Crub_tip<-grep("Cr", tips2)
Cgrand_tip<-grep("Cg", tips2)
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
#Collapse poorly supported branches
#This is a function that someone wrote.  I found it at:
#http://stackoverflow.com/questions/34403957/how-to-collapse-branches-in-a-phylogenetic-tree-by-the-label-in-their-nodes-or-l
#not working right now
# root_tree<-di2multi4node(root_tree)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
#if(Athal_tip != 0 & Alyr_tip != 0){
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
#if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
#} else {Agroup_mono == "NA"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
#if(Crub_tip != 0 & Cgrand_tip != 0){
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
# if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
#} else {CrubCgrand_mono == "NA"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c(Csat_tip))
if(Csat_mono) {Csatmono= "Csativa_monophyletic"} else {Csatmono= "Csativa_non_monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
#if(Crub_tip != 0 & Cgrand_tip != 0 & Csat_tip != 0){
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
# if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
#} else {Cgroup_mono == "NA"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology (STRICT: requires that A, B, and/or C clade are perfectly monogomous)
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the correct topology (LOOSE: Topology analysis with less-strict monophyly requirements)
if(BC_clade) {final_topology_loose = "BC_topology"} else if(AC_clade) {final_topology_loose = "AC_topology"} else if (AB_clade) {final_topology_loose = "AB_topology"} else {final_topology_loose = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology_loose == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology_loose == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
###Investigating the non-monophyletic topologies
##What is sister to A. thaliana?
#Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
#Athal_sis_count<-length(Athal_sisters)
#if(Athal_sis_count==1)
#{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
#{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = "Many_sisters"}
###What is sister to the C.grand - C. rubella clade?
#CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
#CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
#CrubCgra_sis_count<-length(CrubCgra_sisters)
#if(CrubCgra_sis_count==1)
#{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
#{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
#.phylo(root_tree, show.node.label=TRUE)
#find the name of the Athal tip(s)
Athal_tips<-c(tips(root_tree, Athal_tip))
Athal_tips_count<-length(Athal_tips)
if (Athal_tips_count==0)
{Athal_tip_name = "No_Athal_tip"} else if (Athal_tips_count==1)
{Athal_tip_name = Athal_tips} else if (Athal_tips_count==2)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2])} else if (Athal_tips_count==3)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2], Athal_tips[3])}
#find the name of the Crub tip(s)
Crub_tips<-c(tips(root_tree, Crub_tip))
Crub_tips_count<-length(Crub_tips)
if (Crub_tips_count==0)
{Crub_tip_name = "No_Crub_tip"} else if (Crub_tips_count==1)
{Crub_tip_name = Crub_tips} else if (Crub_tips_count==2)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2])} else if (Crub_tips_count==3)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2], Crub_tips[3])}
return(c(Athal_tip_name, Crub_tip_name, Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, final_topology_loose, BS_score
#, Athal_sis_paste, CrubCgra_sis_paste
))
}
output<-lapply(out_trees, TopAnalFunc)
output
output<-lapply(out_trees, TopAnalFunc)
output<-lapply(out_trees, TopAnalFunc)
tips2
Athal_tip_name
grep("AB", tips2)
temp<-grep("AB", tips2)
if (temp > 0){tips2}
if (length(Athal_tip) > 0){
Athal_tips<-c(tips(root_tree, Athal_tip))
Athal_tips_count<-length(Athal_tips)
if (Athal_tips_count==0)
{Athal_tip_name = "No_Athal_tip"} else if (Athal_tips_count==1)
{Athal_tip_name = Athal_tips} else if (Athal_tips_count==2)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2])} else if (Athal_tips_count==3)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2], Athal_tips[3])}
}
Athal_tips<-c(tips(root_tree, Athal_tip))
Athal_tips_count<-length(Athal_tips)
if (Athal_tips_count==0)
{Athal_tip_name = "No_Athal_tip"} else if (Athal_tips_count==1)
{Athal_tip_name = Athal_tips} else if (Athal_tips_count==2)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2])} else if (Athal_tips_count==3)
{Athal_tip_name = paste(Athal_tips[1], Athal_tips[2], Athal_tips[3])}
Crub_tips<-c(tips(root_tree, Crub_tip))
Crub_tips_count<-length(Crub_tips)
if (Crub_tips_count==0)
{Crub_tip_name = "No_Crub_tip"} else if (Crub_tips_count==1)
{Crub_tip_name = Crub_tips} else if (Crub_tips_count==2)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2])} else if (Crub_tips_count==3)
{Crub_tip_name = paste(Crub_tips[1], Crub_tips[2], Crub_tips[3])}
Crub_tips<-c(tips(root_tree, Crub_tip))
Crub_tip
Crub_tips<-c(tips(root_tree, Crub_tip))
Athal_tips<-c(tips(root_tree, Athal_tip))
tips(root_tree, Athal_tip)
?tips
