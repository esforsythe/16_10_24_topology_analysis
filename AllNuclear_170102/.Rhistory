plot.phylo (t1)
plit t1
plot t1
plot (t1)
plot t1obj
rm t1
clear t1
t1 = t1obj[[1]]
plot.phylo (t1)
x <- sim.char(t1, matrix(10) )
y <- sim.char(t1, matrix(10) )
plot (x,y)
fit1 = lm(y~x)
summary(fit1)
lines(x,fit1$coefficients[1] + x*fit1$coefficients[2])
x_ic <- pic(x, t1)
y_ic <- pic(y, t1)
plot (x_ic,y_ic)
fit1_1 = lm(y_ic-x_ic)
fit1_1 = 1m(y_ic-x_ic)
fit11 = lm(y_ic~x_ic)
summary(fit1)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
fitpic = lm(y_ic ~ x_ic -1)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
summary fitpic
summary (fitpic)
t2obj=sim.bd.taxa.age(100,1,50,0,1,1,mrca=TRUE)
t2 = t2obj[[1]]
x2 <- sim.char(t1, matrix(10) )
x2 <- sim.char(t2, matrix(10) )
y2 <- sim.char(t2, matrix(10) )
plot (x1,y1)
plot (x2,y2)
fit2 = lm(y2~x2)
summary(fit2)
lines(x2,fit2$coefficients[1] + x2*fit1$coefficients[2])
x_ic2 <- pic(x2, t2)
y_ic2 <- pic(y2, t2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
summary (fitpic2)
plot (x_ic2,y_ic2)
lines(x_ic,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
plot (x_ic2,y_ic2)
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
plot (x_ic2,y_ic2)
lines(x_ic2,fit2$coefficients[1] + x_ic2*fitpic2$coefficients[2])
plot(fitpic)
plot(fitpic2)
summary (fitpic2)
plot(x_ic2,y_ic2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
lines(x_ic2,fit11$coefficients[1] + x_ic2*fitpic2$coefficients[2])
lines(x_ic2,fit1$coefficients[1] + x_ic2*fitpic2$coefficients[2])
plot(x_ic2,y_ic2)
fitpic2 = lm(y_ic2 ~ x_ic2 -1)
lines(x_ic2,fitpic2$coefficients[1] + x_ic2*fitpic2$coefficients[2])
lines(x_ic2,fit2$coefficients[1] + x_ic2*fit2$coefficients[2])
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
plot (x_ic2,y_IC2)
plot (x_ic2,y_ic2)
lines(x_ic,fit11$coefficients[1] + x_ic*fit11$coefficients[2])
plot.phylo (t2)
t1obj=sim.bd.taxa.age(100,1,100,0,1,1,mrca=TRUE)
t1obj=sim.bd.taxa.age(100,1,1,0,1,1,mrca=TRUE)
t3obj=sim.bd.taxa.age(100,1,100,0,1,1,mrca=TRUE)
t3 = t3obj[[1]]
x3 <- sim.char(t3, matrix(10) )
y3 <- sim.char(t3, matrix(10) )
plot(x3,y3)
fit3 = lm(y3~x3)
summary(fit3)
lines(x3,fit3$coefficients[1] + x3*fit3$coefficients[2])
x_ic3 <- pic(x3, t3)
y_ic3 <- pic(y3, t3)
plot(x_ic3,y_ic3)
fitpic3 = lm(y_ic3 ~ x_ic3 -1)
summary (fitpic3)
plot.phylo (t3)
library("ape", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?ace
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/concat_align.fa")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/concat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/cat_alignment.fa", sig.test = "J", block.size = 10000, replicate = 100)
> install.packages("evobiR")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/chlorotop_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Boecheradopsis_cat_align.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/nuclear_topolgy_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff1_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff2_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff3_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff4_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff5_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff6_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff7_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/Chromosomes/scaff8_catalign.fa", sig.test = "J", block.size = 10000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 100000, replicate = 100)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 100000, replicate = 500)
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/singlex3_cat_align.fa", sig.test = "J", block.size = 50000, replicate = 500)
> install.packages("evobiR")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/catfile160414")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/practice_1.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_03_30_Dstat/practice/practice_2.fasta")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_cat_align.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_cat_align.fasta")
install.packages("evobiR")
library("evobiR")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_concat_notfull.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_04_14_Dstat_syntenicblocks/concat_alignments/Chrom1_concat_notfull_rearrange.fasta")
install.packages("evobiR")
library("evobiR")
CalcPopD
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test1.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta", sig.test = "B", replicate = 100)
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta", sig.test = "B", replicate = 100)
CalcPopD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
CalcD("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_05_09_fullalignconcat/Test3.fasta")
packages(evobiR)
package(evobiR)
citation(evobiR)
install.packages("evobiR", repos='http://cran.itam.mx/')
install.packages("evobiR")
library("evobiR")
citation(evobiR)
citation("evobiR")
citation
citation(package = "base", lib.loc = NULL, auto = NULL)
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Gene_flow_prop170106")
install.packages("ape")
library(ape)
library(geiger)
install.packages("phangorn")
library(phangorn)
install.packages("phytools")
library(phytools)
trees<-read.tree("Nuc_cat161211")
tree<-trees[[2]]
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE, edgelabel=TRUE)
plot.phylo(root_tree)
plot.phylo(root_tree, show.node.label=TRUE)
tips<-root_tree$tip.label
Csat_tip<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
drop_tree<-drop.tip(root_tree, c(Csat_tip, Crub_tip, Cgrand_tip), trim.internal=TRUE, subtree=FALSE)
plot.phylo(drop_tree, show.node.label=TRUE)
tips2<-drop_tree$tip.label
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
Agroup_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Alyr_tip))
#test if all Bstri and Alyr seqs are monophyletic and print results
B_Alyr_mono<-is.monophyletic(phy=drop_tree, c(Bstri_tip, Alyr_tip))
#test if all A group seqs are monophyletic and print results
B_Athal_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Bstri_tip))
if(Agroup_mono) {final_topology = "A_group_topology"} else if(B_Alyr_mono) {final_topology = "B_Alyr_topology"} else if (B_Athal_mono) {final_topology = "B_Athal_topology"} else {final_topology = "Other_topology"}
AA_MRCA<-getMRCA(phy=drop_tree, c(Athal_tip, Alyr_tip))
BAlyr_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Alyr_tip))
BAthal_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Athal_tip))
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(root_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
final_topology
BS_score
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
BS_score
Athal_tip2<-grep("Athal", tips2, value=TRUE)
if (length(Athal_tip2) == 0)
{Athal_tip_name = "No_Athal_tips"} else if (length(Athal_tip2)==1)
{Athal_tip_name = Athal_tip2} else if (length(Athal_tip2)==2)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2])} else if (length(Athal_tip2)==3)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2], Athal_tip2[3])}
Athal_tip_name
return(c(Athal_tip_name, final_topology, BS_score))
Drop_tip_top<-function(tree){
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE, edgelabel=TRUE)
#store tip names of all relevent species for the droptree
tips<-root_tree$tip.label
Csat_tip<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
drop_tree<-drop.tip(root_tree, c(Csat_tip, Crub_tip, Cgrand_tip), trim.internal=TRUE, subtree=FALSE)
tips2<-drop_tree$tip.label
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
#test if all A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Alyr_tip))
#test if all Bstri and Alyr seqs are monophyletic and print results
B_Alyr_mono<-is.monophyletic(phy=drop_tree, c(Bstri_tip, Alyr_tip))
#test if all A group seqs are monophyletic and print results
B_Athal_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Bstri_tip))
###########################################################################################
############                          Topology analysis                        ############
###########################################################################################
#Store the correct topology
if(Agroup_mono) {final_topology = "A_group_topology"} else if(B_Alyr_mono) {final_topology = "B_Alyr_topology"} else if (B_Athal_mono) {final_topology = "B_Athal_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
AA_MRCA<-getMRCA(phy=drop_tree, c(Athal_tip, Alyr_tip))
BAlyr_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Alyr_tip))
BAthal_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Athal_tip))
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Find Athal tip names
Athal_tip2<-grep("Athal", tips2, value=TRUE)
if (length(Athal_tip2) == 0)
{Athal_tip_name = "No_Athal_tips"} else if (length(Athal_tip2)==1)
{Athal_tip_name = Athal_tip2} else if (length(Athal_tip2)==2)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2])} else if (length(Athal_tip2)==3)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2], Athal_tip2[3])}
#return results
return(c(Athal_tip_name, final_topology, BS_score))
}
output<-lapply(trees, Drop_tip_top)
nrow(trees)
length(trees)
#Count number of trees
Ntrees<-length(trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_tip", "Topology", "BS_score")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels, main="Nuclear Topologies")
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/RetDups_161213")
trees<-read.tree("catfile_retdups161230")
Split_trees<-function(tree){
#midpoint root the tree
root_tree<-midpoint(tree, node.labels="support")
#root_tree$node.label=tree$node.label
#normalize branch lengths
#this is required to avoid the "incorrect number of dimensions" error from treeSlice
root_tree<-compute.brlen(root_tree, 100)
#Slice tree at the root (actually very very close to the root)
#This outputs a multiphylo of the two sub trees
sliced_trees<-treeSlice(root_tree, 0.01, trivial=FALSE, prompt=FALSE)
#This if/else loop is to verify that the split worked and yeilded two sub trees
#if it didn't yeild two subtrees, that means that one of the accessions came out sister to all others.  These trees should be discarded.
if (length(sliced_trees) == 2){
alltips<-root_tree$tip.label
tips1<-sliced_trees[[1]]$tip.label
tips2<-sliced_trees[[2]]$tip.label
subtree1<-drop.tip(root_tree, setdiff(alltips, tips2))
subtree2<-drop.tip(root_tree, setdiff(alltips, tips1))
#print trees
write.tree(c(subtree1, subtree2), append=TRUE)
}
#^^^ end of if loop ^^^
#vvv end of split function vvv
}
out_trees_string<-sapply(trees, Split_trees)
write(out_trees_string, file="split_trees.txt")
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Gene_flow_prop170106")
trees<-read.tree("All_Nuc_cat170106")
Drop_tip_top<-function(tree){
tips<-tree$tip.label
Esal_tip<-grep("Es", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE, edgelabel=TRUE)
#store tip names of all relevent species for the droptree
tips<-root_tree$tip.label
Csat_tip<-grep("Cs", tips)
Crub_tip<-grep("Cr", tips)
Cgrand_tip<-grep("Cg", tips)
Athal_tip<-grep("At", tips)
Alyr_tip<-grep("Al", tips)
Bstri_tip<-grep("Bs", tips)
Esal_tip<-grep("Es", tips)
drop_tree<-drop.tip(root_tree, c(Csat_tip, Crub_tip, Cgrand_tip), trim.internal=TRUE, subtree=FALSE)
tips2<-drop_tree$tip.label
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
#test if all A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Alyr_tip))
#test if all Bstri and Alyr seqs are monophyletic and print results
B_Alyr_mono<-is.monophyletic(phy=drop_tree, c(Bstri_tip, Alyr_tip))
#test if all A group seqs are monophyletic and print results
B_Athal_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Bstri_tip))
###########################################################################################
############                          Topology analysis                        ############
###########################################################################################
#Store the correct topology
if(Agroup_mono) {final_topology = "A_group_topology"} else if(B_Alyr_mono) {final_topology = "B_Alyr_topology"} else if (B_Athal_mono) {final_topology = "B_Athal_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
AA_MRCA<-getMRCA(phy=drop_tree, c(Athal_tip, Alyr_tip))
BAlyr_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Alyr_tip))
BAthal_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Athal_tip))
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Find Athal tip names
Athal_tip2<-grep("Athal", tips2, value=TRUE)
if (length(Athal_tip2) == 0)
{Athal_tip_name = "No_Athal_tips"} else if (length(Athal_tip2)==1)
{Athal_tip_name = Athal_tip2} else if (length(Athal_tip2)==2)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2])} else if (length(Athal_tip2)==3)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2], Athal_tip2[3])}
#return results
return(c(Athal_tip_name, final_topology, BS_score))
}
output<-lapply(trees, Drop_tip_top)
output
output<-lapply(trees, Drop_tip_top)
tree<-trees[[2]]
is.rooted(tree)
tree<-trees[[6400]]
is.rooted(tree)
Drop_tip_top<-function(tree){
if (is.rooted(tree)) {root_tree<-tree} else {
tips<-tree$tip.label
Esal_tip<-grep("Es", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE, edgelabel=TRUE)
}
#store tip names of all relevent species for the droptree
tips<-root_tree$tip.label
Csat_tip<-grep("Cs", tips)
Crub_tip<-grep("Cr", tips)
Cgrand_tip<-grep("Cg", tips)
Athal_tip<-grep("At", tips)
Alyr_tip<-grep("Al", tips)
Bstri_tip<-grep("Bs", tips)
Esal_tip<-grep("Es", tips)
drop_tree<-drop.tip(root_tree, c(Csat_tip, Crub_tip, Cgrand_tip), trim.internal=TRUE, subtree=FALSE)
tips2<-drop_tree$tip.label
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
#test if all A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Alyr_tip))
#test if all Bstri and Alyr seqs are monophyletic and print results
B_Alyr_mono<-is.monophyletic(phy=drop_tree, c(Bstri_tip, Alyr_tip))
#test if all A group seqs are monophyletic and print results
B_Athal_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Bstri_tip))
###########################################################################################
############                          Topology analysis                        ############
###########################################################################################
#Store the correct topology
if(Agroup_mono) {final_topology = "A_group_topology"} else if(B_Alyr_mono) {final_topology = "B_Alyr_topology"} else if (B_Athal_mono) {final_topology = "B_Athal_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
AA_MRCA<-getMRCA(phy=drop_tree, c(Athal_tip, Alyr_tip))
BAlyr_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Alyr_tip))
BAthal_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Athal_tip))
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Find Athal tip names
Athal_tip2<-grep("Athal", tips2, value=TRUE)
if (length(Athal_tip2) == 0)
{Athal_tip_name = "No_Athal_tips"} else if (length(Athal_tip2)==1)
{Athal_tip_name = Athal_tip2} else if (length(Athal_tip2)==2)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2])} else if (length(Athal_tip2)==3)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2], Athal_tip2[3])}
#return results
return(c(Athal_tip_name, final_topology, BS_score))
}
rm(output)
output<-lapply(trees, Drop_tip_top)
output<-lapply(trees, Drop_tip_top)
rm(output)
output<-lapply(trees, Drop_tip_top)
output
Drop_tip_top<-function(tree){
if (is.rooted(tree)) {root_tree<-tree} else {
tips<-tree$tip.label
Esal_tip<-grep("Es", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE, edgelabel=TRUE)
}
#store tip names of all relevent species for the droptree
tips<-root_tree$tip.label
Csat_tip<-grep("Cs", tips)
Crub_tip<-grep("Cr", tips)
Cgrand_tip<-grep("Cg", tips)
Athal_tip<-grep("At", tips)
Alyr_tip<-grep("Al", tips)
Bstri_tip<-grep("Bs", tips)
Esal_tip<-grep("Es", tips)
drop_tree<-drop.tip(root_tree, c(Csat_tip, Crub_tip, Cgrand_tip), trim.internal=TRUE, subtree=FALSE)
tips2<-drop_tree$tip.label
Athal_tip<-grep("At", tips2)
Alyr_tip<-grep("Al", tips2)
Bstri_tip<-grep("Bs", tips2)
Esal_tip<-grep("Es", tips2)
#test if all A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Alyr_tip))
#test if all Bstri and Alyr seqs are monophyletic and print results
B_Alyr_mono<-is.monophyletic(phy=drop_tree, c(Bstri_tip, Alyr_tip))
#test if all A group seqs are monophyletic and print results
B_Athal_mono<-is.monophyletic(phy=drop_tree, c(Athal_tip, Bstri_tip))
###########################################################################################
############                          Topology analysis                        ############
###########################################################################################
#Store the correct topology
if(Agroup_mono) {final_topology = "A_group_topology"} else if(B_Alyr_mono) {final_topology = "B_Alyr_topology"} else if (B_Athal_mono) {final_topology = "B_Athal_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
AA_MRCA<-getMRCA(phy=drop_tree, c(Athal_tip, Alyr_tip))
BAlyr_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Alyr_tip))
BAthal_MRCA<-getMRCA(phy=drop_tree, c(Bstri_tip, Athal_tip))
#retrieve the supporting BS score
if(final_topology == "A_group_topology") {BS_score = (drop_tree$node.label[(AA_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Alyr_topology") {BS_score = (drop_tree$node.label[(BAlyr_MRCA - length(drop_tree$tip.label))])} else if(final_topology == "B_Athal_topology") {BS_score = (drop_tree$node.label[(BAthal_MRCA - length(drop_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Find Athal tip names
Athal_tip2<-grep("At", tips2, value=TRUE)
if (length(Athal_tip2) == 0)
{Athal_tip_name = "No_Athal_tips"} else if (length(Athal_tip2)==1)
{Athal_tip_name = Athal_tip2} else if (length(Athal_tip2)==2)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2])} else if (length(Athal_tip2)==3)
{Athal_tip_name = paste(Athal_tip2[1], Athal_tip2[2], Athal_tip2[3])}
#return results
return(c(Athal_tip_name, final_topology, BS_score))
}
output<-lapply(trees, Drop_tip_top)
Ntrees<-length(trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_tip", "Topology", "BS_score")
write.csv(output_df, file = "test.csv")
trees<-read.tree("All_Nuc_cat170106")
output<-lapply(trees, Drop_tip_top)
Ntrees<-length(trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_tip", "Topology", "BS_score")
write.csv(output_df, file = "test.csv")
trees<-read.tree("All_Nuc_cat170106")
output<-lapply(trees, Drop_tip_top)
Ntrees<-length(trees)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Athal_tip", "Topology", "BS_score")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels, main="Nuclear Topologies")
data_noOthers<-subset(output_df, output_df$Topology != "Other_topology")
table<-table(data_noOthers$Topology)
AA_count<-table["A_group_topology"]
BAlyr_count<-table["B_Alyr_topology"]
BAthal_count<-table["B_Athal_topology"]
Denom<-AA_count-BAthal_count
Denom
Denom<-unname(Denom)
Denom
Denom
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/AllNuclear_170102")
data<-read.csv("Results_table_170103.csv", header=TRUE)
data_noOthers<-subset(data, data$Topology_loose != "Other_topology")
table<-table(data_noOthers$Topology_loose)
AB_count<-table["AB_topology"]
AC_count<-table["AC_topology"]
BC_count<-table["BC_topology"]
Num4propGF<-(AC_count - AB_count)
Num4propGF<-unname(Num4propGF)
Num4propGF
Num4propGF/Denom
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/AllNuclear_170102")
data<-read.csv("Results_table_170103.csv", header=TRUE)
data_noOthers<-subset(data, data$Topology_loose != "Other_topology")
table<-table(data_noOthers$Topology_loose)
AB_count<-table["AB_topology"]
AC_count<-table["AC_topology"]
BC_count<-table["BC_topology"]
Num4propGF<-(AC_count - AB_count)
Num4propGF<-unname(Num4propGF)
PropIG<-100*(Num4propGF/Denom)
PropIG
PropIG<-(Num4propGF/Denom)
PropIG
Denom<-AA_count-BAlyr_count
Denom<-unname(Denom)
PropIG<-(Num4propGF/Denom)
PropIG
