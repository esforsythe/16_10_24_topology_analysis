#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE)
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
root_tree$node.label=tree$node.label
#root_tree$node.label
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Csat", tips2)
Crub_tip<-grep("Crub", tips2)
Cgrand_tip<-grep("Cgra", tips2)
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
#Collapse poorly supported branches
#This is a function that someone wrote.  I found it at:
#http://stackoverflow.com/questions/34403957/how-to-collapse-branches-in-a-phylogenetic-tree-by-the-label-in-their-nodes-or-l
#not working right now
# root_tree<-di2multi4node(root_tree)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c(Csat_tip))
if(Csat_mono) {Csatmono= "Csativa_monophyletic"} else {Csatmono= "Csativa_non_monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
#if (Cgroup_mono) {
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
#if (Cgroup_mono) & (Agroup_mono) {
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
#if (Agroup_mono) {
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
###Investigating the non-monophyletic topologies
#What is sister to A. thaliana?
Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
Athal_sis_count<-length(Athal_sisters)
if(Athal_sis_count==1)
{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = "Many_sisters"}
#What is sister to the C.grand - C. rubella clade?
CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
CrubCgra_sis_count<-length(CrubCgra_sisters)
if(CrubCgra_sis_count==1)
{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score, Athal_sis_paste, CrubCgra_sis_paste))
}
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support", "Athal_sister", "CrubCgra_sister")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels)
install.packages('VennDiagram')
library(VennDiagram)
#find the rows that have each group non-monophyletic (aka FALSE)
A_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE))
CrubCgra_false<-nrow(subset(output_df, output_df$Crub_Cgrand_monophyly == FALSE))
Csat_false<-nrow(subset(output_df, output_df$Csat_monophyly == FALSE))
C_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE))
#Find how the falses overlap eachother
A_C_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE ))
A_Csat_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
C_Csat_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
A_C_Csat_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
install.packages("VennDiagram")
grid.newpage()
draw.triple.venn(area1 = A_false, area2 = C_false, area3 = Csat_false,
n12 = A_C_false, n23 = C_Csat_false, n13 = A_Csat_false, n123 = A_C_Csat_false,
category=c("Agroup", "Cgroup", "Csat_paralogs"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid"))
fill = c("skyblue", "pink1", "mediumorchid"))))
library(VennDiagram)
grid.newpage()
draw.triple.venn(area1 = A_false, area2 = C_false, area3 = Csat_false,
n12 = A_C_false, n23 = C_Csat_false, n13 = A_Csat_false, n123 = A_C_Csat_false,
category=c("Agroup", "Cgroup", "Csat_paralogs"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid"))
fill = c("skyblue", "pink1", "mediumorchid"))))
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
hist(boots_only$Bootstrap_Support))
hist(boots_only$Bootstrap_Support)
boots_only
boots_only$Bootstrap_Support
as.numeric(boots_only$Bootstrap_Support)
hist(as.numeric(boots_only$Bootstrap_Support))
boots_only$Bootstrap_Support
?hist
hist(as.vector(boots_only$Bootstrap_Support))
hist(as.numberic(as.vector(boots_only$Bootstrap_Support))
hist(as.numberic(as.vector(boots_only$Bootstrap_Support)))
hist(as.numeric(as.vector(boots_only$Bootstrap_Support)))
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/CP_analysis_161201")
trees<-read.tree("CPcatfile161208")
Ntrees<-length(trees)
install.packages("ape")
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
trees<-read.tree("CPcatfile161208")
Ntrees<-length(trees)
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support", "Athal_sister", "CrubCgra_sister")
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
#plot  the histogram
hist(as.numeric(as.vector(boots_only$Bootstrap_Support)))
#look at trees with non-mono A group
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
hist(as.numeric(as.vector(boots_only$Bootstrap_Support)))
boots_only$Bootstrap_Support
TopAnalFunc<-function(tree){
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE)
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
root_tree$node.label=tree$node.label
#root_tree$node.label
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Csat", tips2)
Crub_tip<-grep("Crub", tips2)
Cgrand_tip<-grep("Cgra", tips2)
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
#if (Cgroup_mono) {
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
#if (Cgroup_mono) & (Agroup_mono) {
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
#if (Agroup_mono) {
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
#Investigating the non-monophyletic topologies
Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
Athal_sis_count<-length(Athal_sisters)
if(Athal_sis_count==1)
{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = Many_sisters}
#What is sister to the C.grand - C. rubella clade?
CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
CrubCgra_sis_count<-length(CrubCgra_sisters)
if(CrubCgra_sis_count==1)
{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
return(c(Agroup_mono, CrubCgrand_mono, Cgroup_mono, final_topology, BS_score, Athal_sis_paste, CrubCgra_sis_paste))
}
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support", "Athal_sister", "CrubCgra_sister")
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
hist(as.numeric(as.vector(boots_only$Bootstrap_Support)))
boots_only$Topology
hist(as.numeric(as.vector(subset(boots_only, boots_only$Topology == "AC_topology"))))
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)))
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)))
plot(full_hist)
plot(full_hist)
plot(full_hist, main="distibution of BS scores", Xlab= "BS score", )
plot(full_hist, main="distibution of BS scores", Xlab= "BS score")
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)))
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)))
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)))
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)))
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)))
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)))
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
lines(AC_hist)
lines(BC_hist)
lines(AB_hist)
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
lines(AC_hist)
lines(BC_hist)
lines(AB_hist)
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support, breaks=20)))
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=20)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=20)
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=20)
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=20)
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
lines(AC_hist)
lines(BC_hist)
lines(AB_hist)
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
#plot  the histogram
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
lines(AC_hist)
lines(BC_hist)
lines(AB_hist)
plot(full_hist, main="distibution of BS scores", xlab= "BS score")
plots(AC_hist, main="distibution of BS scores", xlab= "BS score")
lines(BC_hist)
lines(AB_hist)
plots(AC_hist, main="distibution of BS scores", xlab= "BS score")
lines(BC_hist)
lines(AB_hist)
plots(AC_hist, main="distibution of BS scores", xlab= "BS score")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
plots(AC_hist, main="distibution of BS scores", xlab= "BS score")
plot(AC_hist, main="distibution of BS scores", xlab= "BS score")
lines(BC_hist)
lines(AB_hist)
plot(AC_hist, main="distibution of BS scores", xlab= "BS score", col="red")
lines(BC_hist, col="blue")
lines(AB_hist, col="green")
plot(full_hist, main="distibution of BS scores", xlab= "BS score", col="black")
?plot
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black")
plot(AC_hist, main="distibution of BS scores", xlab= "BS score", border="red")
lines(BC_hist, border="blue")
lines(AB_hist, border="green")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels)
pie(summary(output_df$Topology), labels=labels, main="CP topologies")
install.packages('VennDiagram')
library(VennDiagram)
#find the rows that have each group non-monophyletic (aka FALSE)
A_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE))
CrubCgra_false<-nrow(subset(output_df, output_df$Crub_Cgrand_monophyly == FALSE))
#Csat_false<-nrow(subset(output_df, output_df$Csat_monophyly == FALSE))
C_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE))
#Find how the falses overlap eachother
A_CrubCgra_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$Crub_Cgrand_monophyly == FALSE ))
A_C_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE))
C_CrubCgra_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE & output_df$Crub_Cgrad_monophyly == FALSE))
A_C_CrubCgra_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE & output_df$Crub_Cgrad_monophyly == FALSE))
#Plot the venn diagram
#Note: grid.newpage was throwing an error so I ran dev.off() and it totally fixed it! Go figure!
grid.newpage()
draw.triple.venn(area1 = A_false, area2 = C_false, area3 = CrubCgra_false,
n12 = A_C_false, n23 = C_CrubCgra_false, n13 = A_CrubCgra_false, n123 = A_C_CrubCgra_false,
category=c("Agroup", "Cgroup", "CrubCgra"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid"))
fill = c("skyblue", "pink1", "mediumorchid"))))
install.packages("VennDiagram")
write.csv(output_df, file = "CP_topAnal161212.csv")
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
#plot  the histogram
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100), ylim=c(0,5))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100), ylim=c(0,5))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100), ylim=c(0,5))
setwd("/Users/esforsythe/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Nuc_analysis_161201")
install.packages("ape")
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
trees<-read.tree("Nuc_cat161211")
Ntrees<-length(trees)
TopAnalFunc<-function(tree){
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#normalize the branch lengths because short branches are problematic
#tree<-compute.brlen(tree, 100)
tips<-tree$tip.label
Esal_tip<-grep("Esal", tips)
root_tree<-root(tree, Esal_tip, resolve.root=TRUE)
#After rooting, the BS scores are all messed up. Below, I take the scores from the unrooted tree and put them on the rooted tree.  I need to double-check to make sure this is working correctly!
root_tree$node.label=tree$node.label
#root_tree$node.label
#store tip names of all relevent species for the droptree
tips2<-root_tree$tip.label
Csat_tip<-grep("Csat", tips2)
Crub_tip<-grep("Crub", tips2)
Cgrand_tip<-grep("Cgra", tips2)
Athal_tip<-grep("Atha", tips2)
Alyr_tip<-grep("Alyr", tips2)
Bstri_tip<-grep("Bstr", tips2)
Esal_tip<-grep("Esal", tips2)
#Collapse poorly supported branches
#This is a function that someone wrote.  I found it at:
#http://stackoverflow.com/questions/34403957/how-to-collapse-branches-in-a-phylogenetic-tree-by-the-label-in-their-nodes-or-l
#not working right now
# root_tree<-di2multi4node(root_tree)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=root_tree, c(Csat_tip))
if(Csat_mono) {Csatmono= "Csativa_monophyletic"} else {Csatmono= "Csativa_non_monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
#if (Cgroup_mono) {
BC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
#if (Cgroup_mono) & (Agroup_mono) {
AC_clade<-is.monophyletic(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
#if (Agroup_mono) {
AB_clade<-is.monophyletic(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade & Cgroup_mono) {final_topology = "BC_topology"} else if(AC_clade & Cgroup_mono & Agroup_mono) {final_topology = "AC_topology"} else if (AB_clade & Agroup_mono) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=root_tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(root_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(final_topology == "BC_topology") {BS_score = (root_tree$node.label[(BC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AC_topology") {BS_score = (root_tree$node.label[(AC_MRCA - length(root_tree$tip.label))])} else if(final_topology == "AB_topology") {BS_score = (root_tree$node.label[(AB_MRCA - length(root_tree$tip.label))])} else {BS_score = "BS_scoreNA"}
###Investigating the non-monophyletic topologies
#What is sister to A. thaliana?
Athal_sisters<-c(tips(root_tree, getSisters(root_tree, Athal_tip, mode="number")))
Athal_sis_count<-length(Athal_sisters)
if(Athal_sis_count==1)
{Athal_sis_paste = Athal_sisters} else if(Athal_sis_count==2)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2])} else if(Athal_sis_count==3)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3])} else if(Athal_sis_count==4)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4])} else if(Athal_sis_count==5)
{Athal_sis_paste = paste(Athal_sisters[1], Athal_sisters[2], Athal_sisters[3], Athal_sisters[4], Athal_sisters[5])} else {Athal_sis_paste = "Many_sisters"}
#What is sister to the C.grand - C. rubella clade?
CrubCgra_MRCA<-getMRCA(phy=root_tree, c(Crub_tip, Cgrand_tip))
CrubCgra_sisters<-c(tips(root_tree, getSisters(root_tree, CrubCgra_MRCA, mode="number")))
CrubCgra_sis_count<-length(CrubCgra_sisters)
if(CrubCgra_sis_count==1)
{CrubCgra_sis_paste = CrubCgra_sisters} else if(CrubCgra_sis_count==2)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2])} else if(CrubCgra_sis_count==3)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3])} else if(CrubCgra_sis_count==4)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4])} else if(CrubCgra_sis_count==5)
{CrubCgra_sis_paste = paste(CrubCgra_sisters[1], CrubCgra_sisters[2], CrubCgra_sisters[3], CrubCgra_sisters[4], CrubCgra_sisters[5])} else {CrubCgra_sis_paste = "Many_sisters"}
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score, Athal_sis_paste, CrubCgra_sis_paste))
}
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=Ntrees, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support", "Athal_sister", "CrubCgra_sister")
labels<-names(summary(output_df$Topology))
labels<-paste(labels, summary(output_df$Topology))
pie(summary(output_df$Topology), labels=labels)
pie(summary(output_df$Topology), labels=labels, main="Nuclear Topologies")
install.packages('VennDiagram')
library(VennDiagram)
A_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE))
CrubCgra_false<-nrow(subset(output_df, output_df$Crub_Cgrand_monophyly == FALSE))
Csat_false<-nrow(subset(output_df, output_df$Csat_monophyly == FALSE))
C_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE))
#Find how the falses overlap eachother
A_C_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE ))
A_Csat_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
C_Csat_false<-nrow(subset(output_df, output_df$C_group_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
A_C_Csat_false<-nrow(subset(output_df, output_df$Agroup_monophyly == FALSE & output_df$C_group_monophyly == FALSE & output_df$Csat_monophyly == FALSE))
grid.newpage()
draw.triple.venn(area1 = A_false, area2 = C_false, area3 = Csat_false,
n12 = A_C_false, n23 = C_Csat_false, n13 = A_Csat_false, n123 = A_C_Csat_false,
category=c("Agroup", "Cgroup", "Csat_paralogs"),
lty = "blank",
fill = c("skyblue", "pink1", "mediumorchid"))
write.csv(output_df, file = "Nuc_topAnal161212.csv")
boots_only<-subset(output_df, output_df$Bootstrap_Support != "BS_scoreNA")
#plot  the histogram
full_hist<-hist(as.numeric(as.vector(boots_only$Bootstrap_Support)), breaks=10)
#Split the topologies
boots_AC<-subset(boots_only, boots_only$Topology == "AC_topology")
AC_hist<-hist(as.numeric(as.vector(boots_AC$Bootstrap_Support)), breaks=10)
boots_BC<-subset(boots_only, boots_only$Topology == "BC_topology")
BC_hist<-hist(as.numeric(as.vector(boots_BC$Bootstrap_Support)), breaks=10)
boots_AB<-subset(boots_only, boots_only$Topology == "AB_topology")
AB_hist<-hist(as.numeric(as.vector(boots_AB$Bootstrap_Support)), breaks=10)
plot(full_hist, main="distibution of BS scores", xlab= "BS score", border="black", xlim=c(0,100))
plot(AC_hist, main="distibution of BS scores (AC topology)", xlab= "BS score", border="red", xlim=c(0,100))
plot(BC_hist, main="distibution of BS scores (BC topology)", xlab= "BS score", border="blue", xlim=c(0,100))
plot(AB_hist, main="distibution of BS scores (AB topology)", xlab= "BS score", border="green", xlim=c(0,100))
