Agroup_mono<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#rooted_tree<-root(tree, Esal_tip, resolve.root = TRUE)
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade) {final_topology = "BC_topology"} else if(AC_clade) {final_topology = "AC_topology"} else if (AB_clade) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(rooted_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(BC_clade) {BS_score = (tree$node.label[(BC_MRCA - length(tree$tip.label))])} else if(AC_clade) {BS_score = (tree$node.label[(AC_MRCA - length(tree$tip.label))])} else if(AB_clade) {BS_score = (tree$node.label[(AB_MRCA - length(tree$tip.label))])} else {BS_score = "BS_scoreNA"}
return(c(Agroup_mono, CrubCgrand_mono, Cgroup_mono, final_topology, BS_score))
}
output<-lapply(trees, TopAnalFunc)
#convert the outpt from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=T))
names(output_df) <- c("A-group monophyly", "Crub-Cgrand monophyly", "C-group monophyly", "Topology", "Bootstrap Support")
output_df
rm(output_df)
trees<-read.tree("rooted_catfileCP")
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=T))
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=TRUE))
names(output_df) <- c("A-group monophyly", "Crub-Cgrand monophyly", "C-group monophyly", "Topology", "Bootstrap Support")
output_df
grid.table(output_df)
?pie
pie(output_df$Topology)
barplot(output_df$Topology)
barplot(as.matrix(output_df$Topology)
barplot(as.matrix(output_df$Topology))
output_df$Topology
summary(output_df$Topology)
pie(summary(output_df$Topology))
barplot(summary(output_df$Topology))
?dev.off
pdf("trade.pdf", height=11, width=8.5)
grid.table(output_df)
dev.off()
pdf("CPtable.pdf")
grid.table(output_df)
dev.off()
pdf("CPtable.pdf", height=100, width=60)
grid.table(output_df)
dev.off()
pdf("CPtable.pdf", height=100, width=60)
grid.table(output_df)
dev.off()
pdf("CPtable.pdf", height=20, width=10)
grid.table(output_df)
dev.off()
?subset
names(output_df)
subset(output_df, A-group monophyly= "TRUE" )
subset(output_df, A-group monophyly="TRUE" )
subset(output_df, A-group monophyly=="TRUE")
subset(output_df, "A-group monophyly"=="TRUE")
subset(output_df, "A-group monophyly"=="TRUE")
output_df[output_df$A-group monophyly == "TRUE"]
output_df[A-group monophyly == "TRUE"]
output_df$A-group monophyly == "TRUE"
output_df$A-group monophyly
subset(x=output_df, A-group monophyly=="TRUE")
?subset
subsetted<-subset(output_df, output_df$A-group monophyly=="TRUE")
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
output_df
subsetted<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsetted
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedC<-subset(subsettedCrubCgra, subsettedCrubCgra$C_group_monophyly=="TRUE")
pie(summary(subsettedC$Topology))
summary(subsettedC$Topology)
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/CP_analysis_161201")
TopAnalFunc<-function(tree){
#store tip names of all relevent species for the droptree
tips<-tree$tip.label
Csat_tip<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#tree<-root(tree, Esal_tip, resolve.root=TRUE)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#rooted_tree<-root(tree, Esal_tip, resolve.root = TRUE)
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade) {final_topology = "BC_topology"} else if(AC_clade) {final_topology = "AC_topology"} else if (AB_clade) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(rooted_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(BC_clade) {BS_score = (tree$node.label[(BC_MRCA - length(tree$tip.label))])} else if(AC_clade) {BS_score = (tree$node.label[(AC_MRCA - length(tree$tip.label))])} else if(AB_clade) {BS_score = (tree$node.label[(AB_MRCA - length(tree$tip.label))])} else {BS_score = "BS_scoreNA"}
return(c(Agroup_mono, CrubCgrand_mono, Cgroup_mono, final_topology, BS_score))
}
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/CP_analysis_161201")
#load the needed packages
library(ape)
library(phytools)
library(geiger)
library(lattice)
library(gtable)
install.packages("gridExtra")
library(gridExtra)
###Important note about trees
#For some reason the root function is not working in R.  So instead, trees must be rooted before hand
#I used nw_reroot to root trees before importing them into R
#The grep command for matching the Esal accession is as follows:
#grep -Eoe 'Esal__NC.{20,40}:' RAxML_bipartitions.Atha__NC_000932.1_NP_051* | grep -Eoe 'Esal__NC.*\d' >outgroups
trees<-read.tree("rooted_catfileCP")
#Apply the function to all the trees
output<-lapply(trees, TopAnalFunc)
#convert the outpt from a list to a dataframe
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
#For full analysis
#Build a table with the dataframe
pdf("CPtable.pdf", height=20, width=10)
grid.table(output_df)
dev.off()
#make a pie chart of topologies
pie(summary(output_df$Topology))
#barplot (still need to make into stacked bar chart)
barplot(summary(output_df$Topology))
###For only the monophyletic trees
#subset the data to only include fully monophyletic A and C groups
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedC<-subset(subsettedCrubCgra, subsettedCrubCgra$C_group_monophyly=="TRUE")
pie(summary(subsettedC$Topology))
install.packages("gridExtra")
trees<-read.tree("rooted_catfileCP")
library(ape)
library(phytools)
trees<-read.tree("rooted_catfileCP")
output<-lapply(trees, TopAnalFunc)
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
pdf("CPtable.pdf", height=20, width=10)
grid.table(output_df)
dev.off()
pie(summary(output_df$Topology))
barplot(summary(output_df$Topology))
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedC<-subset(subsettedCrubCgra, subsettedCrubCgra$C_group_monophyly=="TRUE")
pie(summary(subsettedC$Topology))
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Nuc_analysis_161201")
tree<-read.tree("rooted_testtree")
class(tree)
tree$node.label
tree$tip.label
tips<-tree$tip.label
Csat_tips<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
Agroup_mono<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
CrubCgrand_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
Csat_mono<-is.monophyletic(phy=tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
Cgroup_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tip, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
if(BC_clade) {final_topology = "BC_topology"} else if(AC_clade) {final_topology = "AC_topology"} else if (AB_clade) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
BC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
if(BC_clade) {BS_score = (tree$node.label[(BC_MRCA - length(tree$tip.label))])} else if(AC_clade) {BS_score = (tree$node.label[(AC_MRCA - length(tree$tip.label))])} else if(AB_clade) {BS_score = (tree$node.label[(AB_MRCA - length(tree$tip.label))])} else {BS_score = "BS_scoreNA"}
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score))
print(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score))
rm(tree)
TopAnalFunc<-function(tree){
#store tip names of all relevent species for the droptree
tips<-tree$tip.label
Csat_tips<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#tree<-root(tree, Esal_tip, resolve.root=TRUE)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=tree, c("Csat_tips"))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#rooted_tree<-root(tree, Esal_tip, resolve.root = TRUE)
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade) {final_topology = "BC_topology"} else if(AC_clade) {final_topology = "AC_topology"} else if (AB_clade) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(rooted_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(BC_clade) {BS_score = (tree$node.label[(BC_MRCA - length(tree$tip.label))])} else if(AC_clade) {BS_score = (tree$node.label[(AC_MRCA - length(tree$tip.label))])} else if(AB_clade) {BS_score = (tree$node.label[(AB_MRCA - length(tree$tip.label))])} else {BS_score = "BS_scoreNA"}
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score))
}
trees<-read.tree("rooted_testtrees")
output<-lapply(trees, TopAnalFunc)
output
output_df <- data.frame(matrix(unlist(output), nrow=66, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
output_df <- data.frame(matrix(unlist(output), nrow=2, byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
output_df
length(output)
output_df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
trees<-read.tree("Nuctrees_cat")
output<-lapply(trees, TopAnalFunc)
output
output
output_df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
pdf("CPtable.pdf", height=20, width=10)
grid.table(output_df)
dev.off()
pie(summary(output_df$Topology))
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedC<-subset(subsettedCrubCgra, subsettedCrubCgra$C_group_monophyly=="TRUE")
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedCsat<-subset(subsettedCrubCgra, subsettedCrubCgra$Csat_monophyly=="TRUE")
subsettedC<-subset(subsettedCsat, subsettedCsat$C_group_monophyly=="TRUE")
pie(summary(subsettedC$Topology))
summary(subsettedC$Topology)
summary(output_df$Topology))
summary(output_df$Topology)
subsettedC
length(output_df$Csat_monophyly=="TRUE")
length(output_df$Csat_monophyly=="FALSE")
length(output_df)
length(output)
table(output_df$Agroup_monophyly)
non_monos<-c(table(output_df$Agroup_monophyly), table(output_df$Crub_Cgrand_monophyly), table(output_df$Csat_monophyly), table(output_df$Csat_monophyly))
non_monos
table(output_df$Agroup_monophyly)
table(output_df$Crub_Cgrand_monophyly)
table(output_df$Csat_monophyly)
table(output_df$Csat_monophyly)
table(output_df$Agroup_monophyly)
table(output_df$Crub_Cgrand_monophyly)
table(output_df$Csat_monophyly)
Csat_mono<-is.monophyletic(phy=tree, c(Csat_tips"))
Csat_mono
Csat_mono<-is.monophyletic(phy=tree, c(Csat_tips))
tree<-read.tree("rooted_testtree")
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Nuc_analysis_161201")
tree<-read.tree("rooted_testtree")
tips<-tree$tip.label
Csat_tips<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
Csat_mono<-is.monophyletic(phy=tree, c(Csat_tips))
Csat_mono
tree<-read.tree("rooted_testtree")
tips<-tree$tip.label
Csat_tips<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
Csat_mono<-is.monophyletic(phy=tree, c(Csat_tips))
Csat_mono
plot.phylo(tree)
TopAnalFunc<-function(tree){
#store tip names of all relevent species for the droptree
tips<-tree$tip.label
Csat_tips<-grep("Csat", tips)
Crub_tip<-grep("Crub", tips)
Cgrand_tip<-grep("Cgra", tips)
Athal_tip<-grep("Atha", tips)
Alyr_tip<-grep("Alyr", tips)
Bstri_tip<-grep("Bstr", tips)
Esal_tip<-grep("Esal", tips)
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#tree<-root(tree, Esal_tip, resolve.root=TRUE)
###########################################################################################
############                    A group monophyly test                         ############
###########################################################################################
#test if A group seqs are monophyletic and print results
Agroup_mono<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip))
if(Agroup_mono) {Agroupmono = "A group monophyletic"} else {Agroupmono = "A group non-monophyletic"}
###########################################################################################
############                    Crub-Cgra group monophyly test                         ############
###########################################################################################
#test if Crub-Cgrand seqs are monophyletic and print results
CrubCgrand_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip))
if(CrubCgrand_mono) {Capgroupmono = "Crub-Cgrand monophyletic"} else {Capgroupmono = "Crub-Cgrand non-monophyletic"}
###########################################################################################
############                     C.sativa paralog monophyly test                         ############
###########################################################################################
#test if Csativa seqs are monophyletic and print results
Csat_mono<-is.monophyletic(phy=tree, c(Csat_tips))
if(Csat_mono) {Csatmono= "Csativa monophyletic"} else {Csatmono= "Csativa non-monophyletic"}
###########################################################################################
############                    Full C group monophyly test                         ############
###########################################################################################
#test if all C group seqs are monophyletic and print results
Cgroup_mono<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips))
if(Cgroup_mono) {Cgroupmono = "C group monophyletic"} else {Cgroupmono = "C group non-monophyletic"}
###########################################################################################
############                    Root the tree by the Esal tip                  ############
###########################################################################################
#rooted_tree<-root(tree, Esal_tip, resolve.root = TRUE)
###########################################################################################
############                   Topology analysis of keeper trees               ############
###########################################################################################
#Check which clade is monophyletic
BC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_clade<-is.monophyletic(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_clade<-is.monophyletic(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#Store the correct topology
if(BC_clade) {final_topology = "BC_topology"} else if(AC_clade) {final_topology = "AC_topology"} else if (AB_clade) {final_topology = "AB_topology"} else {final_topology = "Other_topology"}
#Store the node representing the MRCA of each potential clade
#This is the node label at which the crucial BS score resides
BC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Bstri_tip))
AC_MRCA<-getMRCA(phy=tree, c(Crub_tip, Cgrand_tip, Csat_tips, Athal_tip, Alyr_tip))
AB_MRCA<-getMRCA(phy=tree, c(Athal_tip, Alyr_tip, Bstri_tip))
#plot.phylo(rooted_tree, show.node.label=TRUE)
#retrieve the supporting BS score
if(BC_clade) {BS_score = (tree$node.label[(BC_MRCA - length(tree$tip.label))])} else if(AC_clade) {BS_score = (tree$node.label[(AC_MRCA - length(tree$tip.label))])} else if(AB_clade) {BS_score = (tree$node.label[(AB_MRCA - length(tree$tip.label))])} else {BS_score = "BS_scoreNA"}
return(c(Agroup_mono, CrubCgrand_mono, Csat_mono, Cgroup_mono, final_topology, BS_score))
}
trees<-read.tree("Nuctrees_cat")
output<-lapply(trees, TopAnalFunc)
output
output_df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
table(output_df$Agroup_monophyly)
table(output_df$Crub_Cgrand_monophyly)
table(output_df$Csat_monophyly)
output_df <- data.frame(matrix(unlist(output), nrow=length(output), byrow=TRUE))
names(output_df) <- c("Agroup_monophyly", "Crub_Cgrand_monophyly", "Csat_monophyly", "C_group_monophyly", "Topology", "Bootstrap_Support")
#For full analysis
#Build a table with the dataframe
pdf("CPtable.pdf", height=100, width=40)
grid.table(output_df)
dev.off()
#make a pie chart of topologies
pie(summary(output_df$Topology))
#barplot (still need to make into stacked bar chart)
barplot(summary(output_df$Topology))
###For only the monophyletic trees
#subset the data to only include fully monophyletic A and C groups
subsettedA<-subset(output_df, output_df$Agroup_monophyly=="TRUE")
subsettedCrubCgra<-subset(subsettedA, subsettedA$Crub_Cgrand_monophyly=="TRUE")
subsettedCsat<-subset(subsettedCrubCgra, subsettedCrubCgra$Csat_monophyly=="TRUE")
subsettedC<-subset(subsettedCsat, subsettedCsat$C_group_monophyly=="TRUE")
table(output_df$Agroup_monophyly)
table(output_df$Crub_Cgrand_monophyly)
table(output_df$Csat_monophyly)
#Make pie chart
pie(summary(subsettedC$Topology))
PlotTreesFunc<-function(tree){
#tips<-tree$tip.label
#Esal_tip<-grep("Esal", tips)
#tree<-root(tree, Esal_tip)
tree<-compute.brlen(tree, 100)
plot.phylo(tree)
nodelabels(tree$node.label)
PlotTreesFunc<-function(tree){
#tips<-tree$tip.label
#Esal_tip<-grep("Esal", tips)
#tree<-root(tree, Esal_tip)
tree<-compute.brlen(tree, 100)
plot.phylo(tree)
nodelabels(tree$node.label)
}
lapply(PlantGrowth, trees)
setwd("~/Documents/Beilstiein_lab_research/BIOINFORMATICS/Brassicaceae_Phylo/16_10_24_topology_analysis/Nuc_analysis_161201")
PlotTreesFunc<-function(tree){
#tips<-tree$tip.label
#Esal_tip<-grep("Esal", tips)
#tree<-root(tree, Esal_tip)
tree<-compute.brlen(tree, 100)
plot.phylo(tree)
nodelabels(tree$node.label)
}
lapply(PlotTreesFunc, trees)
trees<-read.tree("Nuctrees_cat")
lapply(PlotTreesFunc, trees)
lapply(trees, PlotTreesFunc)
